// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using resturant.Models;

namespace resturant.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20220815150332_InitialModel")]
    partial class InitialModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("resturant.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("city")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("homeLocation")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("AddressId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("resturant.Models.FullReport", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("EachSupplierTotal")
                        .HasColumnType("double");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<int?>("SupplyingInvoiceInvoiceId")
                        .HasColumnType("int");

                    b.Property<double>("TotalOfPurchase")
                        .HasColumnType("double");

                    b.Property<string>("goodsName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("storage")
                        .HasColumnType("int");

                    b.Property<string>("supplierName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("supplyingDate")
                        .HasColumnType("datetime");

                    b.HasKey("ReportId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("SupplyingInvoiceInvoiceId");

                    b.ToTable("FullReport");
                });

            modelBuilder.Entity("resturant.Models.InvoiceDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<double>("Count")
                        .HasColumnType("double");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("MainId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("MainId");

                    b.HasIndex("UnitId");

                    b.ToTable("InvoiceDetails");
                });

            modelBuilder.Entity("resturant.Models.Items", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("resturant.Models.Manager", b =>
                {
                    b.Property<int>("ManagerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("email")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("password")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("phoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("username")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ManagerId");

                    b.HasIndex("AddressId");

                    b.ToTable("Manager");
                });

            modelBuilder.Entity("resturant.Models.Sales", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Count")
                        .HasColumnType("double");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("UnitId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("resturant.Models.StockItems", b =>
                {
                    b.Property<int>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("stockNumber")
                        .HasColumnType("int");

                    b.Property<double>("storage")
                        .HasColumnType("double");

                    b.HasKey("StockId");

                    b.HasIndex("ItemId");

                    b.ToTable("StockItems");
                });

            modelBuilder.Entity("resturant.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("supplierLocation")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("supplierName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("supplierNumber")
                        .HasColumnType("int");

                    b.Property<string>("supplierPhone")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("SupplierId");

                    b.HasIndex("ManagerId");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("resturant.Models.Supplying", b =>
                {
                    b.Property<int>("SupplyingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("amount")
                        .HasColumnType("int");

                    b.Property<string>("goodsName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("supplyingDate")
                        .HasColumnType("datetime");

                    b.Property<int>("supplyingNumber")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<int>("unitId")
                        .HasColumnType("int");

                    b.HasKey("SupplyingId");

                    b.HasIndex("unitId");

                    b.ToTable("Supplying");
                });

            modelBuilder.Entity("resturant.Models.SupplyingInvoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("APDTotalCost")
                        .HasColumnType("double");

                    b.Property<string>("InvoiceStatus")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<double>("TotalOfPurchase")
                        .HasColumnType("double");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.Property<double>("discount")
                        .HasColumnType("double");

                    b.Property<DateTime>("invoiceDate")
                        .HasColumnType("datetime");

                    b.Property<int>("supplierId")
                        .HasColumnType("int");

                    b.HasKey("InvoiceId");

                    b.HasIndex("supplierId");

                    b.ToTable("SupplyingInvoice");
                });

            modelBuilder.Entity("resturant.Models.SupplyingProcess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int>("SupplyingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.HasIndex("SupplyingId");

                    b.ToTable("SupplyingProcess");
                });

            modelBuilder.Entity("resturant.Models.Units", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsNumber")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("resturant.Models.FullReport", b =>
                {
                    b.HasOne("resturant.Models.Manager", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("resturant.Models.SupplyingInvoice", "SupplyingInvoice")
                        .WithMany()
                        .HasForeignKey("SupplyingInvoiceInvoiceId");

                    b.Navigation("Manager");

                    b.Navigation("SupplyingInvoice");
                });

            modelBuilder.Entity("resturant.Models.InvoiceDetails", b =>
                {
                    b.HasOne("resturant.Models.Items", "item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("resturant.Models.SupplyingInvoice", "Invoice")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("MainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("resturant.Models.Units", "unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("item");

                    b.Navigation("unit");
                });

            modelBuilder.Entity("resturant.Models.Manager", b =>
                {
                    b.HasOne("resturant.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("resturant.Models.Sales", b =>
                {
                    b.HasOne("resturant.Models.Items", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("resturant.Models.Units", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("resturant.Models.StockItems", b =>
                {
                    b.HasOne("resturant.Models.Items", "item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("item");
                });

            modelBuilder.Entity("resturant.Models.Supplier", b =>
                {
                    b.HasOne("resturant.Models.Manager", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("resturant.Models.Supplying", b =>
                {
                    b.HasOne("resturant.Models.Units", "Unit")
                        .WithMany()
                        .HasForeignKey("unitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("resturant.Models.SupplyingInvoice", b =>
                {
                    b.HasOne("resturant.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("supplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("resturant.Models.SupplyingProcess", b =>
                {
                    b.HasOne("resturant.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("resturant.Models.Supplying", "Supplying")
                        .WithMany()
                        .HasForeignKey("SupplyingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");

                    b.Navigation("Supplying");
                });

            modelBuilder.Entity("resturant.Models.SupplyingInvoice", b =>
                {
                    b.Navigation("InvoiceDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
